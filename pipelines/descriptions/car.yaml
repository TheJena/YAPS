Create new column 'car_age_category' based on 'car_age':
- Create a new column 'car_age_category' based on the value of 'car_age'
- "df[\"car_age_category\"] = df[\"car_age\"].apply(\n        lambda age: \"New\"
  if age <= 3 else (\"Middle\" if age <= 9 else \"Old\")\n    )"
Drop unnecessary columns:
- Remove specified columns from the dataframe
- "df = df.drop(\n        [\n            \"car_drive\",\n            \"car_engine_capacity\",\n
  \           \"car_engine_hp\",\n            \"car_transmission\",\n        ],\n
  \       axis=1,\n    )"
Format car price and mileage columns:
- Add 'k' suffix to values greater than or equal to 1000 in 'car_price' and 'car_mileage'
  columns
- "df[col] = df[col].apply(\n            lambda x: \"{:.1f}k\".format(x / 1000) if
  x >= 1000 else x\n        )"
Rename first column to 'car_id':
- Rename the first column of the dataframe to 'car_id'
- 'df.rename(columns={df.columns[0]: "car_id"}, inplace=True)'
Strip leading and trailing whitespaces from specified columns:
- Remove leading and trailing whitespaces from specified columns
- df[cols] = df[cols].map(str.strip)
